/* "import "redux"" is auto-generated by Snack after importing from "react-redux" */
import "redux" // 3.7.2
// @TO-DO: Delete above after Snack fix this bug

import React, { Component } from 'react'
import { ActivityIndicator, View, StyleSheet } from 'react-native'
import { connect } from 'react-redux' // 5.0.6

import { navigateWithoutBack } from './../navigation'
import { onFetchQuestions, onAnswer } from './../state/modules/AllActions'

import {
  QuizHeadline,
  Card,
  Pagination,
  Answer,
  Spinner, 
} from './../components'

import { withErrorBoundary } from './../error'

class QuizScreen extends Component {

  componentDidMount() {
    this.props.onFetchQuestions()
  }

  componentWillReceiveProps(nextProps) {
    const { numberOfQuestions, counter, isLoading, hasError } = nextProps 

    const isLastQuestion = counter === numberOfQuestions && !isLoading && !hasError
     if (isLastQuestion) {
      this.props.navigation.dispatch(navigateWithoutBack('Result'))
     }
  }

  shouldComponentUpdate(nextProps) {
    return (nextProps.counter < nextProps.numberOfQuestions) | nextProps.hasError
  }
  
  handleAnswer = (value) => {
    const { questions, counter } = this.props
    const { question, correct_answer } = questions[counter]
    
    this.props.onAnswer({ question: { question, correct_answer }, chosen_option: value })
  }
  
  renderQuestion = () => {
    const { questions, numberOfQuestions, counter } = this.props
    const { category, question } = questions[counter]
    
    return (
      <View style={styles.container}>
        <QuizHeadline category={category} />
        <Card question={question} />
        <Pagination current={counter+1} total={numberOfQuestions} />
        <Answer onPress={this.handleAnswer} />
      </View>
    )          
  }
  
  render() { 
    const { isLoading, hasError, errorMessage } = this.props
    let content = <Spinner />

    if (hasError) {
      throw new Error(errorMessage)
    }

    if (!isLoading) {
      content = this.renderQuestion()
    }

    return (
      <View style={styles.container}>
        {content}
      </View>
    )
  }
}

const mapStateToProps = ({ fetchQuestion: { questions, numberOfQuestions }, answer: { counter }, status: { hasError, errorMessage, isLoading } }) => {

  return { questions, numberOfQuestions, isLoading, counter, hasError, errorMessage }
}

const connectedQuizScreen = connect(mapStateToProps, { onFetchQuestions, onAnswer })(QuizScreen)

export default withErrorBoundary(connectedQuizScreen)

const styles = StyleSheet.create(
  {
    container:{
      flex: 1,
      justifyContent: 'space-around',
      alignItems: 'center',
      backgroundColor: '#A2E4F9',
      width: '100%',
    },
  }
)



